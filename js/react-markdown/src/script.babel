var x = `# React Markdown Previewer

## Это подзаголовок
### И другое:
Элемент кода, \`<div></div>\`.

\`\`\`
// многострочный код:
function anotherExample(firstLine, lastLine) {
  if (firstLine == 'text' && lastLine == 'another text') {
    return multiLineCode;
  }
}
\`\`\`

Текст можно сделать **жирным**... ого!

Или _курсивным_.

Или...  **_жирным и курсивным!_**

А так же ~~зачеркнутым~~.

Можно вставлять [ссылки](https://www.google.com), и 
>Цитаты
 
И даже таблицы:

Заголовок | Заголовок | Заголовок?
------------ | ------------- | -------------
Ваш текст может быть здесь | здесь и | здесь....
И даже тут. | ок. | думаю достаточно

- И конечно списки
  - С кружочками
     - Квадратиками
     - и
        - ещё квадратиками


1. А так же нумерованные списки
1. можно только цифрой 1
2. или нет
# 
![React Logo w/ Text](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/512px-React-icon.svg.png)

`;
class Editor extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      text: x
    };
    this.sendNew = this.sendNew.bind(this);
  }
  sendNew(val) {
    this.setState({ text: val.target.value });
    this.props.updateText(val.target.value);
  }
  render() {
    return (
      <div id="mainEditor">
        <div id="topLine">
          <h1>
            <i className="fas fa-pencil-alt" />
            Редактор |{" "}
            <i
              onClick="full()"
              id="fullscreenEditor"
              className="fas fa-expand-alt"
            />
          </h1>
        </div>
        <textarea
          value={this.state.text}
          onChange={this.sendNew}
          type="text"
          id="editor"
        />
      </div>
    );
  }
}

class Preview extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    var cleanText = this.props.text;
    return (
      <div id="mainPreview">
        <div id="topLine">
          <h1>
            <i className="far fa-window-maximize"></i>Предпросмотр |{" "}
            <i id="fullscreenPreview" className="fas fa-expand-alt"></i>
          </h1>
        </div>
        <div id="preview">
          <ReactMarkdown
            className="mark"
            plugins={[remark]}
            source={cleanText}
          />
        </div>
      </div>
    );
  }
}

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      text: x
    };
    this.updateText = this.updateText.bind(this);
  }
  updateText = (event) => {
    this.setState({
      text: event
    });
  };
  render() {
    var oldText = this.state.text;
    return (
      <div id="App">
        <Editor updateText={this.updateText} />
        <Preview text={oldText} />
      </div>
    );
  }
}

// ========================================
ReactDOM.render(<App />, document.getElementById("root"));
$("#fullscreenPreview").click(function () {
  $("#mainEditor").toggleClass("hide");
  $("#mainPreview").toggleClass("big");
});
$("#fullscreenEditor").click(function () {
  $("#mainPreview").toggleClass("hide");
  $("#mainEditor").toggleClass("big");
});
